webpackHotUpdate("bundle",{

/***/ "../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js?!./components/Login.vue?vue&type=script&lang=js&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Home__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./components/Home.vue");
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./_config/_config.js");
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


var config = new _config_config__WEBPACK_IMPORTED_MODULE_1__["default"]();
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "defaultPage",

  data() {
    this.VerificarAutenticado();
    return {
      isLoggingIn: true,
      processing: false,
      //isRecaptcha: false,
      user: {
        email: "",
        password: "",
        confirmPassword: ""
      },
      retornoLogin: ""
    };
  },

  methods: {
    //recaptcha(e) {
    //    if(e.url.indexOf("sucess=true") != -1) {
    //        this.isRecaptcha = true;
    //    }
    //},
    toggleForm() {
      this.isLoggingIn = !this.isLoggingIn;
    },

    VerificarAutenticado() {
      this.$heliarApp.isLoggedIn().then(response => {
        if (response.Status == true) {
          this.$navigateTo(_Home__WEBPACK_IMPORTED_MODULE_0__["default"], {
            clearHistory: false
          });
        }
      }).catch(() => {
        alert("Erro ao verificar autenticação do usuário");
      });
    },

    submit() {
      if (!this.user.email && this.user.password || !this.user.password && this.user.email) {
        this.retornoLogin = 'Por favor, preencher login ou senha!';
        return;
      } //if( !this.isRecaptcha ) {
      //    this.retornoLogin = "Por favor, preencha o captcha!";
      //    return;
      //}


      this.processing = true;

      if (this.isLoggingIn) {
        this.login();
      } else {
        this.register();
      }
    },

    loginAnt() {
      this.$backendService.login(this.user).then(() => {
        this.processing = false;
        this.$navigateTo(_Home__WEBPACK_IMPORTED_MODULE_0__["default"], {
          clearHistory: true
        });
      }).catch(() => {
        this.processing = false;
        this.alert("Unfortunately we could not find your account.");
      });
    },

    login() {
      this.$heliarApp.login(this.user).then(response => {
        this.processing = false;
        config.setToken('f-u5vqcIlfo:APA91bF0D825LoY0rkLJ_bq0ZptGLnO8ShM2zJVnyqDrJMpCgZE3T48AvLwz29oiZTRBmYDI_lV_6lu1JjhKU0PaB9zp5XNrsai31rXE6DdP4964zmQdMLvFb2W3OhVNUGaOAvx_lgnB');
        config.setDeviceId('e9c55bcd-c4c2-4b52-a0d8-c831902e52fd');
        this.$navigateTo(_Home__WEBPACK_IMPORTED_MODULE_0__["default"], {
          clearHistory: true
        });
      });
    },

    forgotPassword() {
      prompt({
        title: "Esqueci minha senha",
        message: "Digite o login que você usou para se registrar no HELIAR EXPRESS para redefinir sua senha.",
        inputType: "email",
        okButtonText: "Enviar",
        cancelButtonText: "Cancelar",
        defaultText: "     " + this.user.email
      }).then(data => {
        if (data.result) {
          this.$heliarApp.resetPassword(data.text.trim()).then(response => {
            this.alert(response.Mensagem);
          }).catch(() => {
            this.alert("Infelizmente, ocorreu um erro ao redefinir sua senha.");
          });
        }
      });
    },

    focusPassword() {
      this.$refs.password.nativeView.focus();
    },

    focusConfirmPassword() {
      if (!this.isLoggingIn) {
        this.$refs.confirmPassword.nativeView.focus();
      }
    },

    alert(message) {
      return alert({
        title: "Atenção",
        okButtonText: "OK",
        message: message
      });
    }

  }
});

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,